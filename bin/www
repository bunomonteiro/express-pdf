#!/usr/bin/env node

/**
 * Module dependencies.
 */

 require('dotenv').config()

 const configurations = require('../common/configurations');
 
 const app = require('../app');
 const debug = require('debug')('pdf-service:server');
 const http = require('http');
 
 /**
  * Get port from environment and store in Express.
  */
 
  const port = normalizePort(configurations.server.port || '8080');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
  const server = http.createServer(app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   const port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string' ?
     'Pipe ' + port :
     'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string' ?
     'pipe ' + addr :
     'port ' + addr.port;
   debug('Listening on ' + bind);
   
   console.log('')
   console.log('[App Title] ', configurations.app.title)
   console.log('[App Description] ', configurations.app.description)
   console.log('[App Version] ', configurations.app.version)
   console.log('[Server Port] ', configurations.server.port)
   console.log('[Request Limit] ', configurations.server.requestLimit)
   console.log('[Server Log Enabled] ', configurations.server.log.isEnabled)
   console.log('[Server Log Msg] ', configurations.server.log.msg)
   console.log('[Server Log Console Transport Options] ', configurations.server.log.transport.console)
   console.log('[Server Log File Transport Options] ', configurations.server.log.transport.file)
   console.log('[Server Log Http Transport Options] ', configurations.server.log.transport.http)
   console.log('[Server Log Stream Transport Options] ', configurations.server.log.transport.stream)
   console.log('')
   console.log(`Express listening on ${bind}`)
 }